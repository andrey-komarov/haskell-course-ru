[1 of 4] Compiling Fusion.Internal  ( ../Fusion/Internal.hs, ../Fusion/Internal.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 58, types: 85, coercions: 0}

$WStream
$WStream =
  \ @ a_aeU @ s_aeV tpl_B1 tpl_B2 ->
    case tpl_B2 of tpl_X7 { __DEFAULT -> Stream tpl_B1 tpl_X7 }

$WSkip
$WSkip =
  \ @ s_aeW @ a_aeX tpl_B1 ->
    case tpl_B1 of tpl_X5 { __DEFAULT -> Skip tpl_X5 }

$WYield
$WYield =
  \ @ s_aeW @ a_aeX tpl_B1 tpl_B2 ->
    case tpl_B1 of tpl_X6 { __DEFAULT ->
    case tpl_B2 of tpl_X8 { __DEFAULT -> Yield tpl_X6 tpl_X8 }
    }

$W:*:
$W:*: =
  \ @ a_aeY @ b_aeZ tpl_B1 tpl_B2 ->
    case tpl_B1 of tpl_X6 { __DEFAULT ->
    case tpl_B2 of tpl_X8 { __DEFAULT -> :*: tpl_X6 tpl_X8 }
    }

$WJ
$WJ =
  \ @ a_af0 tpl_B1 -> case tpl_B1 of tpl_X4 { __DEFAULT -> J tpl_X4 }

a_rfE
a_rfE = \ @ a_m _ -> Done

empty
empty = \ @ a_m -> Stream (a_rfE) ()



[2 of 4] Compiling Fusion.Common    ( ../Fusion/Common.hs, ../Fusion/Common.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 119, types: 143, coercions: 0}

iterate
iterate =
  \ @ a_c eta_B2 eta1_B1 ->
    case eta1_B1 of tpl_X7 { __DEFAULT ->
    let {
      next_sqs
      next_sqs =
        \ eta2_Xk ->
          case eta2_Xk of x_XmY { __DEFAULT ->
          case eta_B2 x_XmY of tpl1_X8 { __DEFAULT -> Yield x_XmY tpl1_X8 }
          } } in
    Stream next_sqs tpl_X7
    }

takeWhile'
takeWhile' =
  \ @ a_g eta_B2 eta1_B1 ->
    case eta1_B1 of _ { Stream @ s_amW next_amF s_amG ->
    let {
      next'_sqq
      next'_sqq =
        \ eta2_Xc ->
          case eta2_Xc of _ { (c_amI, s1_amJ) ->
          case next_amF s1_amJ of _ {
            Done -> Done;
            Skip s'_amK -> Skip (c_amI, s'_amK);
            Yield x_amL s'_amM ->
              case eta_B2 x_amL of _ {
                False ->
                  case c_amI of _ {
                    S1 -> Yield x_amL (S2, s'_amM);
                    S2 -> Done
                  };
                True -> Yield x_amL (c_amI, s'_amM)
              }
          }
          } } in
    Stream next'_sqq (S1, s_amG)
    }

lvl_rx5
lvl_rx5 = unpackCString# "there is no last of empty stream"

lvl1_rx6
lvl1_rx6 = \ @ a_j -> error lvl_rx5

last
last =
  \ @ a_j eta_B1 ->
    case eta_B1 of _ { Stream @ s_an1 next_amq s_amr ->
    letrec {
      last''_svH
      last''_svH =
        \ x_amz s1_amA ->
          case x_amz of x1_XmD { __DEFAULT ->
          case s1_amA of s2_XmF { __DEFAULT ->
          case next_amq s2_XmF of _ {
            Done -> x1_XmD;
            Skip s'_amB -> last''_svH x1_XmD s'_amB;
            Yield x'_amC s'_amD -> last''_svH x'_amC s'_amD
          }
          }
          }; } in
    letrec {
      last'_an5
      last'_an5 =
        \ s1_amu ->
          case s1_amu of s2_Xmx { __DEFAULT ->
          case next_amq s2_Xmx of _ {
            Done -> lvl1_rx6;
            Skip s'_amw -> last'_an5 s'_amw;
            Yield x_amx s'_amy -> last''_svH x_amx s'_amy
          }
          }; } in
    last'_an5 s_amr
    }



[3 of 4] Compiling Fusion.Newton    ( ../Fusion/Newton.hs, ../Fusion/Newton.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 194, types: 65, coercions: 0}

findRoot
findRoot =
  \ eta_B3 eta1_B2 eta2_B1 ->
    case eta2_B1 of tpl_X7 { D# ipv_sTF ->
    case eta1_B2 tpl_X7 of _ { D# x_aMy ->
    case eta1_B2 (D# (+## ipv_sTF 1.0e-3)) of _ { D# x1_XMK ->
    case eta1_B2 (D# (-## ipv_sTF 1.0e-3)) of _ { D# y_aMr ->
    case eta1_B2 tpl_X7 of _ { D# x2_aM8 ->
    let {
      $w$j_sYy
      $w$j_sYy =
        \ ww_sYn ww1_sYr ww2_sYs ->
          letrec {
            $wlast''_sYz
            $wlast''_sYz =
              \ ww3_sY8 ww4_sYc ww5_sYd ->
                case ww5_sYd of x3_Xoc { D# ipv1_XUU ->
                case eta1_B2 x3_Xoc of _ { D# x4_XNp ->
                case eta1_B2 (D# (+## ipv1_XUU 1.0e-3)) of _ { D# x5_XNE ->
                case eta1_B2 (D# (-## ipv1_XUU 1.0e-3)) of _ { D# y1_XNo ->
                case eta1_B2 x3_Xoc of _ { D# x6_XOG ->
                case /## x4_XNp (/## (-## x5_XNE y1_XNo) 2.0e-3)
                of wild8_XO9 { __DEFAULT ->
                case >=## x6_XOG 0.0 of _ {
                  False ->
                    case eta_B3 of _ { D# y2_aM3 ->
                    case >## (negateDouble# x6_XOG) y2_aM3 of _ {
                      False ->
                        case ww4_sYc of _ {
                          S1 -> $wlast''_sYz ipv1_XUU S2 (D# (-## ipv1_XUU wild8_XO9));
                          S2 -> ww3_sY8
                        };
                      True -> $wlast''_sYz ipv1_XUU ww4_sYc (D# (-## ipv1_XUU wild8_XO9))
                    }
                    };
                  True ->
                    case eta_B3 of _ { D# y2_aM3 ->
                    case >## x6_XOG y2_aM3 of _ {
                      False ->
                        case ww4_sYc of _ {
                          S1 -> $wlast''_sYz ipv1_XUU S2 (D# (-## ipv1_XUU wild8_XO9));
                          S2 -> ww3_sY8
                        };
                      True -> $wlast''_sYz ipv1_XUU ww4_sYc (D# (-## ipv1_XUU wild8_XO9))
                    }
                    }
                }
                }
                }
                }
                }
                }
                }; } in
          $wlast''_sYz ww_sYn ww1_sYr ww2_sYs } in
    case /## x_aMy (/## (-## x1_XMK y_aMr) 2.0e-3)
    of wild4_XNa { __DEFAULT ->
    case >=## x2_aM8 0.0 of _ {
      False ->
        case eta_B3 of _ { D# y1_aM3 ->
        case >## (negateDouble# x2_aM8) y1_aM3 of _ {
          False ->
            case $w$j_sYy ipv_sTF S2 (D# (-## ipv_sTF wild4_XNa))
            of ww_sYw { __DEFAULT ->
            D# ww_sYw
            };
          True ->
            case $w$j_sYy ipv_sTF S1 (D# (-## ipv_sTF wild4_XNa))
            of ww_sYw { __DEFAULT ->
            D# ww_sYw
            }
        }
        };
      True ->
        case eta_B3 of _ { D# y1_aM3 ->
        case >## x2_aM8 y1_aM3 of _ {
          False ->
            case $w$j_sYy ipv_sTF S2 (D# (-## ipv_sTF wild4_XNa))
            of ww_sYw { __DEFAULT ->
            D# ww_sYw
            };
          True ->
            case $w$j_sYy ipv_sTF S1 (D# (-## ipv_sTF wild4_XNa))
            of ww_sYw { __DEFAULT ->
            D# ww_sYw
            }
        }
        }
    }
    }
    }
    }
    }
    }
    }



[4 of 4] Compiling Main             ( Main.hs, Main.o )

==================== Tidy Core ====================
Result size of Tidy Core = {terms: 277, types: 145, coercions: 12}

lvl_r2RH
lvl_r2RH = D# 10.0

lvl1_r2RI
lvl1_r2RI = D# 9.999

lvl2_r2RJ
lvl2_r2RJ = D# 10.001

main5
main5 =
  \ f_a1iM eta_a1uP ->
    hPutStr2
      stdout
      (unpackAppendCString#
         "f "
         (case f_a1iM lvl_r2RH of _ { D# x_aMy ->
          case f_a1iM lvl2_r2RJ of _ { D# x1_XMN ->
          case f_a1iM lvl1_r2RI of _ { D# y_aMr ->
          let {
            $j_s2MX
            $j_s2MX =
              \ ww_a2LP w_X2LR ->
                ++
                  ($w$sshowSignedFloat $fShowDouble_$sshowFloat shows26 ww_a2LP ([]))
                  (unpackAppendCString#
                     " = "
                     (case f_a1iM w_X2LR of _ { D# ww1_X2M8 ->
                      $w$sshowSignedFloat $fShowDouble_$sshowFloat shows26 ww1_X2M8 ([])
                      })) } in
          letrec {
            $wlast''_s2Qs
            $wlast''_s2Qs =
              \ ww_s2NQ ww1_s2NU ww2_s2NV ->
                case ww2_s2NV of x5_Xo8 { D# ipv4_XOd ->
                case f_a1iM x5_Xo8 of _ { D# x6_XNn ->
                case f_a1iM (D# (+## ipv4_XOd 1.0e-3)) of _ { D# x7_XNF ->
                case f_a1iM (D# (-## ipv4_XOd 1.0e-3)) of _ { D# y1_XNm ->
                case /## x6_XNn (/## (-## x7_XNF y1_XNm) 2.0e-3)
                of wild7_XOa { __DEFAULT ->
                case >=## x6_XNn 0.0 of _ {
                  False ->
                    case >## (negateDouble# x6_XNn) 1.0e-6 of _ {
                      False ->
                        case ww1_s2NU of _ {
                          S1 -> $wlast''_s2Qs ipv4_XOd S2 (D# (-## ipv4_XOd wild7_XOa));
                          S2 -> ww_s2NQ
                        };
                      True ->
                        $wlast''_s2Qs ipv4_XOd ww1_s2NU (D# (-## ipv4_XOd wild7_XOa))
                    };
                  True ->
                    case >## x6_XNn 1.0e-6 of _ {
                      False ->
                        case ww1_s2NU of _ {
                          S1 -> $wlast''_s2Qs ipv4_XOd S2 (D# (-## ipv4_XOd wild7_XOa));
                          S2 -> ww_s2NQ
                        };
                      True ->
                        $wlast''_s2Qs ipv4_XOd ww1_s2NU (D# (-## ipv4_XOd wild7_XOa))
                    }
                }
                }
                }
                }
                }
                }; } in
          case /## x_aMy (/## (-## x1_XMN y_aMr) 2.0e-3)
          of wild3_XNd { __DEFAULT ->
          case >=## x_aMy 0.0 of _ {
            False ->
              case >## (negateDouble# x_aMy) 1.0e-6 of _ {
                False ->
                  case $wlast''_s2Qs 10.0 S2 (D# (-## 10.0 wild3_XNd))
                  of ww_s2Oe { __DEFAULT ->
                  $j_s2MX ww_s2Oe (D# ww_s2Oe)
                  };
                True ->
                  case $wlast''_s2Qs 10.0 S1 (D# (-## 10.0 wild3_XNd))
                  of ww_s2Oe { __DEFAULT ->
                  $j_s2MX ww_s2Oe (D# ww_s2Oe)
                  }
              };
            True ->
              case >## x_aMy 1.0e-6 of _ {
                False ->
                  case $wlast''_s2Qs 10.0 S2 (D# (-## 10.0 wild3_XNd))
                  of ww_s2Oe { __DEFAULT ->
                  $j_s2MX ww_s2Oe (D# ww_s2Oe)
                  };
                True ->
                  case $wlast''_s2Qs 10.0 S1 (D# (-## 10.0 wild3_XNd))
                  of ww_s2Oe { __DEFAULT ->
                  $j_s2MX ww_s2Oe (D# ww_s2Oe)
                  }
              }
          }
          }
          }
          }
          }))
      True
      eta_a1uP

main2
main2 =
  \ x_a1hY ->
    case x_a1hY of _ { D# x1_a1PR ->
    D# (-## (expDouble# x1_a1PR) 2.0)
    }

main3
main3 = \ x_a1hV -> x_a1hV

main4
main4 =
  \ x_a1hU ->
    case x_a1hU of _ { D# x1_aP9 -> D# (-## (*## x1_aP9 x1_aP9) 5.0) }

main1
main1 =
  \ s_a1PE ->
    case main5 main4 s_a1PE of _ { (# ipv_a1PH, ipv1_a1PI #) ->
    case main5 main3 ipv_a1PH of _ { (# ipv2_X1PZ, ipv3_X1Q1 #) ->
    case main5 expDouble ipv2_X1PZ of _ { (# ipv4_X1Q3, ipv5_X1Q5 #) ->
    case main5 sinDouble ipv4_X1Q3 of _ { (# ipv6_X1Q7, ipv7_X1Q9 #) ->
    case main5 main2 ipv6_X1Q7 of _ { (# ipv8_X1Qb, ipv9_X1Qd #) ->
    (# ipv8_X1Qb,
       : ipv1_a1PI
         (: ipv3_X1Q1 (: ipv5_X1Q5 (: ipv7_X1Q9 (: ipv9_X1Qd ([]))))) #)
    }
    }
    }
    }
    }

main
main = main1 `cast` ...

main6
main6 = \ eta_B1 -> runMainIO1 (main1 `cast` ...) eta_B1

main
main = main6 `cast` ...



Linking Main ...
